{"version":3,"sources":["api/getWether.js","components/MainCard/MainCard.jsx","components/Form/Form.jsx","components/Card/Card.jsx","components/Cards/Cards.jsx","App.jsx","index.js"],"names":["process","REACT_APP_KEY","REACT_APP_URL","getWeather","url","fetch","then","res","ok","json","Promise","reject","MainCard","React","memo","weather","className","src","icon","alt","name","Math","round","main","temp","Form","onAdd","onError","useState","city","setCity","inputValue","setInputValue","useEffect","catch","onSubmit","e","preventDefault","trim","length","handleSubmit","type","placeholder","value","onChange","target","id","Card","dt_txt","classnames","split","Cards","list","map","el","uuidv4","App","geo","setGeo","setWeather","error","setError","setList","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","statusText","slice","ReactDOM","render","document","getElementById"],"mappings":"iUAAA,EAAyCA,sJAAjCC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,cAEVC,EAAa,SAACC,GAAD,OACxBC,MAAM,GAAD,OAAIH,GAAJ,OAAoBE,EAApB,kBAAiCH,IACnCK,MAAK,SAAAC,GACJ,OAAKA,EAAIC,GAIFD,EAAIE,OAHFC,QAAQC,OAAOJ,O,eCFjBK,EAAWC,IAAMC,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACpC,OACE,qBAAKC,UAAU,UAAf,SACE,0BAASA,UAAU,qBAAnB,UACE,8BACE,qBAAKA,UAAU,OAAOC,IAAG,2CAAsCF,EAAQA,QAAQ,GAAGG,KAAzD,WAAwEC,IAAI,OAEvG,sBAAKH,UAAU,4BAAf,UACE,sBAAMA,UAAU,2BAAhB,SAA4CD,EAAQK,OAClD,sBAAKJ,UAAU,OAAf,UACE,sBAAMA,UAAU,cAAhB,SAA+BK,KAAKC,MAAMP,EAAQQ,KAAKC,KAAO,UAC9D,sBAAMR,UAAU,gBAAhB,6BCXDS,G,MAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC5B,EAAwBC,mBAAS,UAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACR9B,EAAW,aAAD,OAAc0B,EAAd,4CACPvB,MAAK,SAAAC,GACJoB,EAAQ,MACRD,EAAMnB,MAEP2B,MAAMP,KACR,CAACE,IAUJ,OACE,qBAAKb,UAAU,OAAf,SACE,sBAAOmB,SAAU,SAACC,GAAD,OAVA,SAACA,GACpBA,EAAEC,iBACCN,EAAWO,OAAOC,SACnBT,EAAQC,GACRC,EAAc,KAMUQ,CAAaJ,IAArC,SACE,sBAAKpB,UAAU,mBAAf,UACE,uBACEyB,KAAK,OACLzB,UAAU,eACV0B,YAAY,YACZ,aAAW,YACX,mBAAiB,gBACjBC,MAAOZ,EACPa,SAAU,SAACR,GAAD,OAAOJ,EAAcI,EAAES,OAAOF,UAE1C,wBACE3B,UAAU,4BACVyB,KAAK,SACLK,GAAG,gBAHL,6B,eClCGC,G,MAAO,SAAC,GAA+B,IAA7BxB,EAA4B,EAA5BA,KAAMR,EAAsB,EAAtBA,QAASiC,EAAa,EAAbA,OACpC,OACE,sBAAKhC,UAAWiC,IAAW,UAAW,CAClC,eAAiB5B,KAAKC,MAAMC,EAAKC,KAAO,UAAY,GACpD,eAAoD,KAAnCH,KAAKC,MAAMC,EAAKC,KAAO,QACxC,cAAgBH,KAAKC,MAAMC,EAAKC,KAAO,SAAW,KAHtD,UAKE,qBAAKR,UAAU,gBAAf,SACE,gCAASgC,EAAOE,MAAM,KAAK,GAAGA,MAAM,KAAK,OAE3C,8BACE,qBAAKjC,IAAG,2CAAsCF,EAAQ,GAAGG,KAAjD,WAAgEC,IAAI,OAE9E,qBAAKH,UAAU,gBAAf,SACE,+BAAOK,KAAKC,MAAMC,EAAKC,KAAO,iBCbzB2B,G,MAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnB,oBAAIpC,UAAU,OAAd,SACGoC,EAAKC,KAAI,SAAAC,GAAE,OACV,oBAEEtC,UAAU,aAFZ,SAIE,cAAC,EAAD,eAAUsC,KAHLC,sBC+DEC,MA7Df,WACE,MAAsB5B,mBAAS,MAA/B,mBAAO6B,EAAP,KAAYC,EAAZ,KACA,EAA8B9B,mBAAS,MAAvC,mBAAOb,EAAP,KAAgB4C,EAAhB,KACA,EAA0B/B,mBAAS,MAAnC,mBAAOgC,EAAP,KAAcC,EAAd,KACA,EAAwBjC,mBAAS,IAAjC,mBAAOwB,EAAP,KAAaU,EAAb,KA6BA,OA3BA7B,qBAAU,WACR8B,UAAUC,YAAYC,oBAAmB,SAACC,GACxCR,EAAOQ,QAGR,IAEHjC,qBAAU,WACJwB,GACFtD,EAAW,eAAD,OAAgBsD,EAAIS,OAAOC,SAA3B,gBAA2CV,EAAIS,OAAOE,YAC7D9D,MAAK,SAAAC,GACJoD,EAAWpD,GACXsD,EAAS,SAEV3B,MAAM2B,KAGV,CAACJ,IAEJxB,qBAAU,WACJlB,GACFZ,EAAW,cAAD,OAAeY,EAAQK,OAChCd,MAAK,SAAAC,GAAG,OAAIA,EAAI6C,QAChB9C,KAAKwD,KAEP,CAAC/C,IAGF,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SAEE,cAAC,EAAD,CAAMU,MAAOiC,EAAYhC,QAASkC,MAEpC,qBAAK7C,UAAU,QAAf,SACG4C,GAAS,sBAAM5C,UAAU,gBAAhB,SAAiC4C,EAAMS,eAEnD,qBAAKrD,UAAWiC,IAAW,WAAY,CACrC,eAAgBlC,GAAWM,KAAKC,MAAMP,EAAQQ,KAAKC,KAAO,UAAY,GACtE,eAAgBT,GAAsD,KAA3CM,KAAKC,MAAMP,EAAQQ,KAAKC,KAAO,QAC1D,cAAeT,GAAWM,KAAKC,MAAMP,EAAQQ,KAAKC,KAAO,SAAW,KAHtE,SAKGT,GAAW,gCACV,kCACE,cAAC,EAAD,CAAUA,QAASA,MAErB,kCACE,cAAC,EAAD,CAAOqC,KAAMA,EAAKkB,MAAM,EAAG,gB,MCzDvCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1fdad623.chunk.js","sourcesContent":["const { REACT_APP_KEY, REACT_APP_URL } = process.env\n\nexport const getWeather = (url) => (\n  fetch(`${REACT_APP_URL}${url}&appid=${REACT_APP_KEY}`)\n    .then(res => {\n      if (!res.ok) {\n        return Promise.reject(res)\n      }\n\n      return res.json()\n    })\n)","import React from 'react';\nimport { getWeather } from '../../api/getWether';\nimport './MainCard.scss';\n\nexport const MainCard = React.memo(({ weather }) => {\n  return (\n    <div className=\"weather\">\n      <section className=\"weather--container\">\n        <div>\n          <img className=\"icon\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\" />\n        </div>\n        <div className=\"weather--container__about\">\n          <span className=\"weather--container__name\">{weather.name}</span>\n            <div className=\"temp\">\n              <span className=\"temp__degre\">{Math.round(weather.main.temp - 273.15)}</span>\n              <span className=\"temp__celsius\">C</span>\n            </div>\n        </div>\n      </section>\n\n    </div>\n  )\n})","import React, { useState, useEffect } from 'react';\nimport { getWeather } from '../../api/getWether';\nimport './Form.scss';\n\nexport const Form = ({ onAdd, onError }) => {\n  const [city, setCity] = useState('london');\n  const [inputValue, setInputValue] = useState('')\n\n  useEffect(() => {\n    getWeather(`weather?q=${city}&appid=348d3054b4f5732453d1ab4bd9d80eca`)\n      .then(res => {\n        onError(null)\n        onAdd(res)\n      })\n      .catch(onError)\n  }, [city]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if(inputValue.trim().length) {\n      setCity(inputValue)\n      setInputValue('')\n    }\n  }\n\n  return (\n    <div className=\"form\">\n      <form  onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Find city\"\n            aria-label=\"Find city\"\n            aria-describedby=\"button-addon2\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n          <button\n            className=\"btn btn-outline-secondary\"\n            type=\"submit\"\n            id=\"button-addon2\"\n          >\n            Button\n          </button>\n        </div>\n      </form>\n    </div>\n\n  )\n  \n}","import React from \"react\";\nimport classnames from 'classnames';\nimport './Card.scss';\n\nexport const Card = ({ main, weather, dt_txt }) => {\n  return (\n    <div className={classnames(\"element\", {\n        \"cold-weather\":  Math.round(main.temp - 273.15) <= -10,\n        \"cool-weather\":  Math.round(main.temp - 273.15) === 10,\n        \"hot-weather\":  Math.round(main.temp - 273.15) >= 30\n      })}>\n      <div className=\"element--time\">\n        <span>{+(dt_txt.split(' ')[1].split(':')[0])}</span>\n      </div>\n      <div>\n        <img src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`} alt=\"\" />\n      </div>\n      <div className=\"element--temp\">\n        <span>{Math.round(main.temp - 273.15)}</span>\n      </div>\n\n    </div>\n  )\n}","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Card } from '../Card';\nimport './Cards.scss';\n \nexport const Cards = ({ list }) => (\n  <ul className=\"list\">\n    {list.map(el => (\n      <li\n        key={uuidv4()}\n        className=\"list--item\"\n      >\n        <Card {...el}/>\n      </li>\n    ))}\n  </ul>\n)\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport classnames from 'classnames';\nimport { MainCard } from './components/MainCard'\nimport { getWeather } from './api/getWether'\nimport { Form } from './components/Form';\nimport { Cards } from './components/Cards';\n\n\n//С=К - 273.15 переведення в цельсії з кельвінів \n\nfunction App() {\n  const [geo, setGeo] = useState(null);\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  const [list, setList] = useState([])\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((coords) => {\n      setGeo(coords)\n    })\n\n  }, [])\n\n  useEffect(() => {\n    if (geo) {\n      getWeather(`weather?lat=${geo.coords.latitude}&lon=${geo.coords.longitude}`)\n        .then(res => {\n          setWeather(res)\n          setError(null)\n        })\n        .catch(setError);\n    }\n\n  }, [geo]);\n\n  useEffect(() => {\n    if (weather) {\n      getWeather(`forecast?q=${weather.name}`)\n      .then(res => res.list)\n      .then(setList)\n    }\n  }, [weather]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        {}\n        <Form onAdd={setWeather} onError={setError}/>\n      </div>\n      <div className=\"error\">\n        {error && <span className=\"error--mesage\">{error.statusText}</span>}\n      </div>\n      <div className={classnames(\"location\", {\n        \"cold-weather\": weather && Math.round(weather.main.temp - 273.15) <= -10,\n        \"cool-weather\": weather && Math.round(weather.main.temp - 273.15) === 10,\n        \"hot-weather\": weather && Math.round(weather.main.temp - 273.15) >= 30\n      })}>\n        {weather && <div>\n          <section>\n            <MainCard weather={weather} />\n          </section>\n          <section>\n            <Cards list={list.slice(0, 5)}/>\n          </section>\n\n        </div>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}