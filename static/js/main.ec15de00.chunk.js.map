{"version":3,"sources":["components/MainCard/MainCard.jsx","api/getData.js","components/CitysList/CitysList.jsx","components/Form/Form.jsx","components/Card/Card.jsx","components/Cards/Cards.jsx","App.jsx","index.js"],"names":["MainCard","React","memo","weather","className","src","icon","alt","name","Math","round","main","temp","getWeather","url","fetch","then","res","ok","json","Promise","reject","CitysList","citys","onAdd","map","city","onClick","place_name","id","Form","setGeo","onError","useState","inputValue","setInputValue","cityName","setCityName","setCitys","apliedQuery","useCallback","f","timer","value","clearTimeout","setTimeout","debounce","useEffect","features","addCoords","coord","geo","geometry","coordinates","reverse","onSubmit","e","preventDefault","length","handleSubmit","type","placeholder","onChange","target","trim","disabled","Card","dew_point","dt","currentDate","Date","classnames","toLocaleDateString","weekday","Cards","list","el","uuidv4","App","setWeather","error","setError","setList","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","catch","daily","statusText","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec15de00.chunk.js","sourcesContent":["import React from 'react';\nimport './MainCard.scss';\n\nexport const MainCard = React.memo(({ weather }) => {\n  return (\n    <div className=\"weather\">\n      <section className=\"weather--container\">\n        <div>\n          <img className=\"icon\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\" />\n        </div>\n        <div className=\"weather--container__about\">\n          <span className=\"weather--container__name\">{weather.name}</span>\n            <div className=\"temp\">\n              <span className=\"temp__degre\">{Math.round(weather.main.temp - 273.15)}</span>\n              <span className=\"temp__celsius\">C</span>\n            </div>\n        </div>\n      </section>\n    </div>\n  )\n})","export const getWeather = (url) => (\n  fetch(`https://api.openweathermap.org/data/2.5/${url}&appid=348d3054b4f5732453d1ab4bd9d80eca`)\n    .then(res => {\n      if (!res.ok) {\n        return Promise.reject(res)\n      }\n\n      return res.json()\n    })\n)\n\nexport const getCitys = (name) => (\n  fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${name}.json?access_token=pk.eyJ1Ijoic2VyaGlpdWEiLCJhIjoiY2t1d2hhNnpvMXg3ejJ1bG5tbHdmeGtnciJ9.ddqlI9No9vaqKynBUQviWg`)\n  .then(res => res.json())\n)","import React from \"react\";\nimport './CitysList.scss'\n\nexport const CitysList = ({ citys, onAdd }) => (\n  <ul className=\"citys\">\n    {citys.map(city => {\n      return <li\n        className=\"citys--item\"\n        key={city.id}\n        onClick={() => onAdd(city)}\n      >\n        <span className=\"citys--name\">{city.place_name}</span>\n      </li>\n    })}\n  </ul>\n)","import React, { useState, useEffect, useCallback } from 'react';\nimport { CitysList } from '../CitysList';\nimport { getCitys } from '../../api/getData';\nimport './Form.scss';\n\nconst debounce = (f) => {\n  let timer;\n\n  return (value) => {\n    clearTimeout(timer);\n    timer = setTimeout(f, 1000, value);\n  };\n};\n\nexport const Form = ({ setGeo, onError }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [cityName, setCityName] = useState('');\n  const [citys, setCitys] = useState([]);\n\n  const apliedQuery = useCallback(debounce(setCityName), []);\n\n  const handleChange = (value) => {\n    if (!inputValue.trim() && citys.length) {\n      setCitys([]);\n    }\n\n    setInputValue(value);\n    apliedQuery(value);\n  }\n\n  useEffect(() => {\n    if (!cityName) return;\n\n    getCitys(cityName)\n    .then(res => setCitys(res.features));\n    \n  }, [cityName]);\n\n  const addCoords = (coord) => {\n    const geo = coord.geometry.coordinates.reverse();\n    setGeo(geo);\n    setInputValue('');\n    setCityName('');\n    setCitys([]);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(citys.length) {\n      addCoords(citys[0]);\n    };\n  };\n\n  return (\n    <div className=\"form\">\n      <form  onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Find city\"\n            aria-label=\"Find city\"\n            aria-describedby=\"button-addon2\"\n            value={inputValue}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n          <button\n            className=\"btn btn-outline-secondary\"\n            type=\"submit\"\n            id=\"button-addon2\"\n            disabled={!inputValue}\n          >\n            Button\n          </button>\n        </div>\n        {(!!citys.length && !!inputValue) && <CitysList citys={citys} onAdd={addCoords}/>}\n      </form>\n    </div>\n  )\n};\n","import React from \"react\";\nimport classnames from 'classnames';\nimport './Card.scss';\n\nexport const Card = ({ dew_point, weather, dt }) => {\n  const currentDate = new Date(dt * 1000)\n\n  return (\n    <div className={classnames(\"element\", {\n        \"cold-weather\":  Math.round(dew_point - 273.15) <= -10,\n        \"cool-weather\":  Math.round(dew_point - 273.15) === 10,\n        \"hot-weather\":  Math.round(dew_point - 273.15) >= 30\n      })}>\n      <div className=\"element--week-day\">\n        <span>{currentDate.toLocaleDateString(\"en-US\", { weekday: 'long' })}</span>\n      </div>\n      <div>\n        <img src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`} alt=\"\" />\n      </div>\n      <div className=\"element--temp\">\n        <span>{Math.round(dew_point - 273.15)}</span>\n      </div>\n\n    </div>\n  )\n}","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Card } from '../Card';\nimport './Cards.scss';\n \nexport const Cards = ({ list }) => (\n  <ul className=\"list\">\n    {list.map(el => (\n      <li\n        key={uuidv4()}\n        className=\"list--item\"\n      >\n        <Card {...el}/>\n      </li>\n    ))}\n  </ul>\n)\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport classnames from 'classnames';\nimport { MainCard } from './components/MainCard'\nimport { getWeather } from './api/getData'\nimport { Form } from './components/Form';\nimport { Cards } from './components/Cards';\n\nfunction App() {\n  const [geo, setGeo] = useState([]);\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  const [list, setList] = useState([]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({ coords }) => {\n      setGeo([coords.latitude, coords.longitude]);\n    });\n\n  }, []);\n\n  useEffect(() => {\n    if (geo.length) {\n      getWeather(`weather?lat=${geo[0]}&lon=${geo[1]}`)\n        .then(res => {\n          setWeather(res);\n          setError(null);\n        })\n        .catch(setError);\n    }\n\n  }, [geo]);\n\n  useEffect(() => {\n    if (geo.length) {\n      getWeather(`onecall?lat=${geo[0]}&lon=${geo[1]}&exclude=current,hourly,minutely`)\n      .then(res => res.daily)\n      .then(setList)\n    }\n  }, [geo]);\n\n  return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <Form onError={setError} setGeo={setGeo}/>\n        </div>\n        <div className=\"error\">\n          {error && <span className=\"error--mesage\">{error.statusText}</span>}\n        </div>\n        { weather && <div className={\n          classnames(\n          \"location\", {\n          \"cold-weather\": weather && Math.round(weather.main.temp - 273.15) <= -10,\n          \"cool-weather\": weather && Math.round(weather.main.temp - 273.15) === 10,\n          \"hot-weather\": weather && Math.round(weather.main.temp - 273.15) >= 30\n        })}>\n          <div>\n            <section>\n              <MainCard weather={weather} />\n            </section>\n            <section>\n              {!!list.length && <Cards list={list.slice(0, -1)}/>}\n            </section>\n\n          </div>\n        </div>}\n      </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}